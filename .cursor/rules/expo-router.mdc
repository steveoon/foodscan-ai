---
description: 这个规则适用于使用 Expo Router 的路由和页面文件，提供了路由结构和页面开发的最佳实践。
globs: app/**/*.tsx,app/**/*.ts`
alwaysApply: false
---
# Expo Router 规则

## 规则内容

### 路由结构

- 遵循 Expo Router 的文件系统路由约定
- 使用`_layout.tsx`文件定义布局和嵌套导航
- 使用`(tabs)`等命名约定创建分组路由
- 使用`[param].tsx`命名约定创建动态路由
- 使用`+not-found.tsx`处理 404 页面
- 使用`index.tsx`作为默认路由
- 使用`name+api.ts`命名约定创建 API 路由

### API 路由

- 使用`+api.ts`后缀创建 API 路由（例如：`app/hello+api.ts`）
- API 路由文件导出 HTTP 方法函数：`GET`、`POST`、`PUT`、`PATCH`、`DELETE`、`HEAD`和`OPTIONS`
- 返回`Response`对象，如`Response.json()`
- API 路由不能使用平台特定扩展名（如`hello+api.web.ts`）
- 确保在`app.json`中配置`web.output: "server"`以支持服务器输出

### 示例 API 路由

```tsx
// app/api/chat+api.ts
export async function POST(request: Request) {
  const { messages } = await request.json();

  // 处理请求逻辑
  const responseData = {
    reply: "这是服务器的回复",
    timestamp: new Date().toISOString(),
  };

  return Response.json(responseData);
}

// 支持多种HTTP方法
export async function GET(request: Request) {
  const url = new URL(request.url);
  const query = url.searchParams.get("query") || "";

  return Response.json({
    message: `收到查询: ${query}`,
    method: "GET",
  });
}
```

### 页面组件

- 页面组件应该是纯展示组件，业务逻辑应该放在 hooks 中
- 使用`useLocalSearchParams`获取路由参数
- 使用`useRouter`进行编程式导航
- 使用`Link`组件进行声明式导航
- 使用`Redirect`组件进行重定向

### 示例页面结构

```tsx
import { StyleSheet } from "react-native";
import { View, Text } from "../../components/ThemedComponents";
import { useLocalSearchParams, useRouter, Link } from "expo-router";
import { useDataFetching } from "../../hooks/useDataFetching";

export default function DetailPage() {
  const { id } = useLocalSearchParams();
  const router = useRouter();
  const { data, loading, error } = useDataFetching(id);

  if (loading) {
    return <Text>加载中...</Text>;
  }

  if (error) {
    return <Text>出错了: {error.message}</Text>;
  }

  return (
    <View style={styles.container}>
      <Text style={styles.title}>{data.title}</Text>
      <Text style={styles.description}>{data.description}</Text>

      <Link href="/" style={styles.link}>
        返回首页
      </Link>

      <Text style={styles.button} onPress={() => router.back()}>
        返回上一页
      </Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
  },
  title: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 8,
  },
  description: {
    fontSize: 16,
    marginBottom: 16,
  },
  link: {
    color: "blue",
    marginBottom: 8,
  },
  button: {
    color: "blue",
  },
});
```

### 布局组件

- 使用`_layout.tsx`定义共享布局
- 使用`Slot`组件渲染子路由
- 使用`Stack.Screen`配置页面标题和其他选项
- 考虑使用`Stack.Screen`的`options`属性自定义页面外观

### 示例布局结构

```tsx
import { Stack } from "expo-router";
import { useColorScheme } from "react-native";
import Colors from "../../constants/Colors";

export default function Layout() {
  const colorScheme = useColorScheme();

  return (
    <Stack
      screenOptions={{
        headerStyle: {
          backgroundColor: Colors[colorScheme ?? "light"].background,
        },
        headerTintColor: Colors[colorScheme ?? "light"].text,
        headerTitleStyle: {
          fontWeight: "bold",
        },
      }}
    >
      <Stack.Screen
        name="index"
        options={{
          title: "首页",
        }}
      />
      <Stack.Screen
        name="[id]"
        options={({ route }) => ({
          title: `详情 #${route.params.id}`,
        })}
      />
    </Stack>
  );
}
```

### 导航状态管理

- 使用`useSegments`获取当前路由段
- 使用`usePathname`获取当前路径
- 使用`useNavigation`获取导航对象
- 考虑使用上下文提供者在路由之间共享状态

### 性能优化

- 使用`useFocusEffect`处理页面焦点事件
- 考虑使用`React.memo`优化页面组件
- 避免在路由变化时进行不必要的重新渲染
- 使用`useCallback`和`useMemo`优化性能

### 客户端 API 调用

- 使用相对路径调用 API 路由（如`fetch('/api/chat')`）
- 在开发环境中，相对路径会自动指向开发服务器
- 在生产环境中，可以通过`app.json`中的`origin`字段配置基础 URL
- 考虑使用环境变量`EXPO_UNSTABLE_DEPLOY_SERVER=1`在 EAS 构建中自动配置服务器 URL
