---
description: 这个规则适用于项目中的 React 组件文件，提供了组件开发的具体指导和最佳实践。
globs: components/**/*.tsx`,components/**/*.ts
alwaysApply: false
---
# React 组件规则

## 适用范围

**适用于:** `components/**/*.tsx`, `components/**/*.ts`

## 规则内容

### 组件结构

- 使用函数式组件而非类组件
- 使用命名导出而非默认导出
- 组件应该是纯函数，避免副作用
- 将大型组件拆分为更小的可复用组件
- 使用 TypeScript 接口定义组件 props
- 为 props 提供默认值和类型注解

### 示例组件结构

```tsx
import { StyleSheet } from "react-native";
import { View, Text } from "./ThemedComponents";
import { useColors } from "../hooks/useColors"; // 使用颜色钩子

// 定义组件props接口
interface MyComponentProps {
  title: string;
  description?: string;
  onPress?: () => void;
}

// 组件实现
export function MyComponent({
  title,
  description = "默认描述",
  onPress,
}: MyComponentProps) {
  // 获取主题颜色
  const colors = useColors();
  
  // 组件逻辑

  return (
    <View style={[styles.container, { backgroundColor: colors.background }]}>
      <Text style={[styles.title, { color: colors.text }]}>{title}</Text>
      {description && <Text style={[styles.description, { color: colors.secondary }]}>{description}</Text>}
    </View>
  );
}

// 样式定义
const styles = StyleSheet.create({
  container: {
    padding: 16,
  },
  title: {
    fontSize: 18,
    fontWeight: "bold",
  },
  description: {
    fontSize: 14,
    marginTop: 8,
  },
});
```

### 样式指南

- 使用 StyleSheet.create 创建样式
- 避免内联样式，除非样式是动态的
- 使用主题变量而非硬编码颜色值
- 使用相对单位而非固定像素值
- 考虑不同屏幕尺寸和方向
- 使用 Flexbox 进行布局

### 颜色系统

- 使用 `@bacons/apple-colors` 包提供的 iOS 标准颜色
- 创建颜色主题钩子，支持深色和浅色模式
- 避免直接在组件中硬编码颜色值
- 遵循平台设计规范的颜色使用

```tsx
// hooks/useColors.ts 示例
import { useColorScheme } from "react-native";
import * as AppleColors from "@bacons/apple-colors";

export function useColors() {
  const colorScheme = useColorScheme();
  const isDark = colorScheme === "dark";
  
  return {
    primary: isDark ? AppleColors.blue.dark : AppleColors.blue.light,
    secondary: isDark ? AppleColors.gray.dark : AppleColors.gray.light,
    background: isDark ? "#000000" : "#FFFFFF",
    text: isDark ? "#FFFFFF" : "#000000",
    // 其他颜色...
  };
}
```

### 状态管理

#### 本地状态

- 使用 useState 管理简单的组件内部状态
- 使用 useReducer 管理复杂状态
- 使用 useContext 管理跨组件状态
- 避免过度使用状态，优先使用 props
- 考虑状态提升以共享状态

#### 全局状态 (Zustand)

- 使用 Zustand 管理全局应用状态
- 创建模块化的状态存储
- 只订阅组件所需的状态切片
- 使用 TypeScript 类型定义状态和操作

```tsx
// stores/foodStore.ts 示例
import { create } from "zustand";

interface FoodItem {
  id: string;
  name: string;
  calories: number;
  // 其他属性...
}

interface FoodStore {
  items: FoodItem[];
  recentScans: FoodItem[];
  addItem: (item: FoodItem) => void;
  removeItem: (id: string) => void;
  clearRecentScans: () => void;
}

export const useFoodStore = create<FoodStore>((set) => ({
  items: [],
  recentScans: [],
  addItem: (item) => set((state) => ({ 
    items: [...state.items, item],
    recentScans: [item, ...state.recentScans].slice(0, 10)
  })),
  removeItem: (id) => set((state) => ({ 
    items: state.items.filter(item => item.id !== id) 
  })),
  clearRecentScans: () => set({ recentScans: [] })
}));

// 在组件中使用
function FoodList() {
  // 只订阅需要的状态切片
  const items = useFoodStore(state => state.items);
  const removeItem = useFoodStore(state => state.removeItem);
  
  // 组件实现...
}
```

### 表单处理

- 使用 `react-hook-form` 管理表单状态和验证
- 结合 `zod` 进行表单验证
- 创建可复用的表单组件

```tsx
// 表单组件示例
import { useForm, Controller } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { TextInput, Button, Text, View } from "react-native";

// 定义表单验证模式
const formSchema = z.object({
  foodName: z.string().min(2, "食物名称至少需要2个字符"),
  calories: z.number().min(0, "卡路里不能为负数")
});

type FormData = z.infer<typeof formSchema>;

export function FoodForm({ onSubmit }) {
  const { control, handleSubmit, formState: { errors } } = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      foodName: "",
      calories: 0
    }
  });
  
  return (
    <View>
      <Controller
        control={control}
        name="foodName"
        render={({ field: { onChange, value } }) => (
          <TextInput
            value={value}
            onChangeText={onChange}
            placeholder="食物名称"
          />
        )}
      />
      {errors.foodName && <Text>{errors.foodName.message}</Text>}
      
      {/* 其他表单字段... */}
      
      <Button title="提交" onPress={handleSubmit(onSubmit)} />
    </View>
  );
}
```

### UI组件增强

#### 分段控制

- 使用 `@react-native-segmented-control/segmented-control` 创建分段控制组件
- 用于在有限选项间切换的场景

```tsx
import SegmentedControl from "@react-native-segmented-control/segmented-control";

function FilterControl() {
  const [selectedIndex, setSelectedIndex] = useState(0);
  const segments = ["全部", "早餐", "午餐", "晚餐"];
  
  return (
    <SegmentedControl
      values={segments}
      selectedIndex={selectedIndex}
      onChange={(event) => {
        setSelectedIndex(event.nativeEvent.selectedSegmentIndex);
      }}
    />
  );
}
```

#### 模糊效果

- 使用 `expo-blur` 创建毛玻璃效果
- 适用于创建现代化UI元素

```tsx
import { BlurView } from "expo-blur";

function GlassCard({ children }) {
  const colorScheme = useColorScheme();
  
  return (
    <BlurView
      intensity={80}
      tint={colorScheme === "dark" ? "dark" : "light"}
      style={styles.container}
    >
      {children}
    </BlurView>
  );
}
```

#### 底部弹出菜单

- 使用 `vaul` 创建底部弹出菜单
- 适用于详情展示和操作菜单

```tsx
import { Drawer } from "vaul";

function FoodDetails({ food }) {
  return (
    <Drawer>
      <Drawer.Trigger asChild>
        <Button title="查看详情" />
      </Drawer.Trigger>
      <Drawer.Content>
        <Drawer.Header>
          <Text>{food.name}</Text>
        </Drawer.Header>
        <Drawer.Body>
          {/* 详情内容 */}
        </Drawer.Body>
      </Drawer.Content>
    </Drawer>
  );
}
```

### 图像处理

- 使用 `expo-image-picker` 选择或拍摄图片
- 处理图片上传和显示

```tsx
import * as ImagePicker from "expo-image-picker";
import { Image, Button } from "react-native";

function ImageUploader() {
  const [image, setImage] = useState(null);
  
  const pickImage = async () => {
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });
    
    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };
  
  return (
    <View>
      <Button title="选择图片" onPress={pickImage} />
      {image && <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />}
    </View>
  );
}
```

### 性能优化

- 使用 useMemo 缓存计算结果
- 使用 useCallback 缓存回调函数
- 使用 React.memo 避免不必要的重新渲染
- 避免在渲染函数中创建新函数或对象
- 使用 useEffect 的依赖数组正确管理副作用

### 可访问性

- 使用适当的语义化组件
- 提供足够的对比度
- 支持屏幕阅读器
- 考虑键盘导航
- 提供适当的触摸目标大小

### 测试

- 编写单元测试验证组件行为
- 测试边缘情况和错误处理
- 模拟 props 和用户交互
- 验证渲染输出和副作用